const descriptions = {
  "Potato___Early_blight": `
    <p><strong>Early blight</strong> рдПрдХ <strong>рдлрдВрдЧрд▓ рд░реЛрдЧ</strong> рд╣реИ рдЬреЛ рдореБрдЦреНрдп рд░реВрдк рд╕реЗ рдЖрд▓реВ рдФрд░ рдЯрдорд╛рдЯрд░ рдХреА рдкрддреНрддрд┐рдпреЛрдВ, рддрдиреЛрдВ рдФрд░ рдХрднреА-рдХрднреА рдХрдВрджреЛрдВ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддрд╛ рд╣реИред рдЗрд╕реЗ <em>Alternaria solani</em> рдирд╛рдордХ рдХрд╡рдХ рдХреЗ рдХрд╛рд░рдг рд╣реЛрддрд╛ рд╣реИред</p>
    
    <p>ЁЯФН <strong>рд▓рдХреНрд╖рдг (Symptoms):</strong></p>
    <ul>
      <li>рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдЧрд╣рд░реЗ рднреВрд░реЗ рд░рдВрдЧ рдХреЗ рдзрдмреНрдмреЗ рдЬреЛ рдЧреЛрд▓ рдФрд░ рдЫрд▓реНрд▓реЗрджрд╛рд░ рдЖрдХреГрддрд┐ рдореЗрдВ рд╣реЛрддреЗ рд╣реИрдВ</li>
      <li>рдзрдмреНрдмреЛрдВ рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдкреАрд▓реА рд╣рд▓реНрдХреА рд░реЗрдЦрд╛</li>
      <li>рдкреБрд░рд╛рдиреА рдкрддреНрддрд┐рдпрд╛рдБ рдкрд╣рд▓реЗ рдкреНрд░рднрд╛рд╡рд┐рдд рд╣реЛрддреА рд╣реИрдВ рдФрд░ рдзреАрд░реЗ-рдзреАрд░реЗ рд╕реВрдЦрдиреЗ рд▓рдЧрддреА рд╣реИрдВ</li>
      <li>рдЧрдВрднреАрд░ рдорд╛рдорд▓реЛрдВ рдореЗрдВ рддрдирд╛ рдФрд░ рдХрдВрдж рднреА рд╕рдВрдХреНрд░рдорд┐рдд рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ</li>
    </ul>

    <p>тЪая╕П <strong>рдиреБрдХрд╕рд╛рди (Damage):</strong></p>
    <ul>
      <li>рдкреМрдзреЗ рдХреА рдкрддреНрддрд┐рдпрд╛рдБ рдЭреБрд▓рд╕ рдЬрд╛рддреА рд╣реИрдВ рдЬрд┐рд╕рд╕реЗ рдкреНрд░рдХрд╛рд╢ рд╕рдВрд╢реНрд▓реЗрд╖рдг рдХрдо рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ</li>
      <li>рдлрд╕рд▓ рдХрд╛ рдЙрддреНрдкрд╛рджрди рдШрдЯ рдЬрд╛рддрд╛ рд╣реИ</li>
    </ul>

    <p>ЁЯЫбя╕П <strong>рдмрдЪрд╛рд╡ рдХреЗ рдЙрдкрд╛рдп (Control Measures):</strong></p>
    <ul>
      <li>рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ (crop rotation)</li>
      <li>рдкреБрд░рд╛рдиреЗ рдкреМрдзреЛрдВ рдХреЗ рдЕрд╡рд╢реЗрд╖ рд╣рдЯрд╛ рджреЗрдВ</li>
      <li>рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ</li>
      <li>рд░реЛрдЧ рджрд┐рдЦрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рд╣реА рдлрдлреВрдВрджрдирд╛рд╢реА рджрд╡рд╛рдЗрдпрд╛рдБ рдЬреИрд╕реЗ рдореИрдирдХреЛрдЬреЗрдм рдпрд╛ рдХреНрд▓реЛрд░реЛрдерд╛рд▓реЛрдирд┐рд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ</li>
      <li>рдкреМрдзреЛрдВ рдореЗрдВ рдЕрдЪреНрдЫреА рджреВрд░реА рдмрдирд╛рдП рд░рдЦреЗрдВ рддрд╛рдХрд┐ рд╣рд╡рд╛ рдХрд╛ рд╕рдВрдЪрд╛рд░ рдмрдирд╛ рд░рд╣реЗ</li>
    </ul>
  `,

  "Potato___Late_blight": `
    <p><strong>Late blight</strong> рдЖрд▓реВ рдХреА рд╕рдмрд╕реЗ рдШрд╛рддрдХ рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рд╣реИ, рдЬреЛ <em>Phytophthora infestans</em> рдирд╛рдордХ рдлрдлреВрдВрджреА рдХреЗ рдХрд╛рд░рдг рд╣реЛрддреА рд╣реИред рдпрд╣ рдирдореА рдФрд░ рдардВрдбреЗ рдореМрд╕рдо рдореЗрдВ рддреЗрдЬреА рд╕реЗ рдлреИрд▓рддреА рд╣реИред</p>

    <p>ЁЯФН <strong>рд▓рдХреНрд╖рдг (Symptoms):</strong></p>
    <ul>
      <li>рдкрддреНрддрд┐рдпреЛрдВ рдХреЗ рдХрд┐рдирд╛рд░реЛрдВ рдкрд░ рдЬрд▓рдиреЗ рдЬреИрд╕реЗ рднреВрд░реЗ рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ</li>
      <li>рдзрдмреНрдмреЛрдВ рдХреЗ рдЖрд╕-рдкрд╛рд╕ рд╕рдлреЗрдж рдлрдлреВрдВрджрдиреБрдорд╛ рдкрд░рдд</li>
      <li>рддрдиреЛрдВ рдкрд░ рдХрд╛рд▓реЗ-рднреВрд░реЗ рдЪрдХрддреНрддреЗ рдЬреЛ рдкреВрд░реЗ рдкреМрдзреЗ рдХреЛ рд╕рдбрд╝рд╛ рджреЗрддреЗ рд╣реИрдВ</li>
      <li>рдХрдВрджреЛрдВ рдкрд░ рднреА рдЧрд╣рд░реЗ рдзрдмреНрдмреЗ рдФрд░ рд╕рдбрд╝рди (rot) рд╣реЛ рд╕рдХрддреА рд╣реИ</li>
    </ul>

    <p>тЪая╕П <strong>рдиреБрдХрд╕рд╛рди (Damage):</strong></p>
    <ul>
      <li>рдмрд╣реБрдд рддреЗрдЬреА рд╕реЗ рдлреИрд▓рдиреЗ рд╡рд╛рд▓реА рдмреАрдорд╛рд░реА рд╣реИ, рдкреВрд░реА рдлрд╕рд▓ рдХреЛ рдХреБрдЫ рд╣реА рджрд┐рдиреЛрдВ рдореЗрдВ рдмрд░реНрдмрд╛рдж рдХрд░ рд╕рдХрддреА рд╣реИ</li>
      <li>рдХрдВрджреЛрдВ рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдФрд░ рдЙрддреНрдкрд╛рджрди рдореЗрдВ рднрд╛рд░реА рдЧрд┐рд░рд╛рд╡рдЯ</li>
    </ul>

    <p>ЁЯЫбя╕П <strong>рдмрдЪрд╛рд╡ рдХреЗ рдЙрдкрд╛рдп (Control Measures):</strong></p>
    <ul>
      <li>рдмреАрдЬ рдХрдВрдж рд╕реНрд╡рд╕реНрде рдФрд░ рдкреНрд░рдорд╛рдгрд┐рдд рд╕реНрд░реЛрдд рд╕реЗ рд▓реЗрдВ</li>
      <li>рдирдореА рдФрд░ рд╡рд░реНрд╖рд╛ рдХреЗ рдореМрд╕рдо рдореЗрдВ рдлрд╕рд▓ рдкрд░ рд╡рд┐рд╢реЗрд╖ рдирд┐рдЧрд░рд╛рдиреА рд░рдЦреЗрдВ</li>
      <li>рдлрдлреВрдВрджрдирд╛рд╢реА рдЬреИрд╕реЗ рдореЗрдЯрд╛рд▓реЗрдХреНрдЬрд┐рд▓ рдФрд░ рдореИрдиреНрдХреЛрдЬрд╝реЗрдм рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ</li>
      <li>рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рдкрд░реНрдпрд╛рдкреНрдд рджреВрд░реА рд░рдЦреЗрдВ</li>
      <li>рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рддреБрд░рдВрдд рд╣рдЯрд╛ рджреЗрдВ</li>
    </ul>
  `,

  "Potato___healthy": `
    <p>ЁЯМ▒ <strong>рдпрд╣ рдкрддреНрддрд╛ рдкреВрд░реНрдгрддрдГ рд╕реНрд╡рд╕реНрде рд╣реИред</strong> рдЗрд╕рдореЗрдВ рдХрд┐рд╕реА рднреА рдкреНрд░рдХрд╛рд░ рдХреЗ рд░реЛрдЧ рдпрд╛ рд╕рдВрдХреНрд░рдордг рдХреЗ рдХреЛрдИ рд▓рдХреНрд╖рдг рдирд╣реАрдВ рджрд┐рдЦрд╛рдИ рджреЗ рд░рд╣реЗ рд╣реИрдВред</p>

    <p>тЬЕ <strong>рд╕реНрд╡рд╕реНрде рдкрддреНрддрд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди:</strong></p>
    <ul>
      <li>рд░рдВрдЧ рдореЗрдВ рддрд╛рдЬрдЧреА рдФрд░ рд╣рд░рд╛рдкрди</li>
      <li>рдХреЛрдИ рдзрдмреНрдмрд╛, рдлрдлреВрдВрджреА рдпрд╛ рд╕реВрдЦрд╛рдкрди рдирд╣реАрдВ</li>
      <li>рдкреМрдзрд╛ рдЕрдЪреНрдЫрд╛ рд╡рд┐рдХрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ</li>
    </ul>

    <p>ЁЯТб <strong>рд╕реБрдЭрд╛рд╡:</strong></p>
    <ul>
      <li>рдлрд╕рд▓ рдХрд╛ рдирд┐рдпрдорд┐рдд рдирд┐рд░реАрдХреНрд╖рдг рдХрд░рддреЗ рд░рд╣реЗрдВ</li>
      <li>рд╕рдордп-рд╕рдордп рдкрд░ рдкреЛрд╖рдг рдФрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рдзреНрдпрд╛рди рд░рдЦреЗрдВ</li>
      <li>рдХреАрдЯреЛрдВ рдФрд░ рд░реЛрдЧреЛрдВ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдЬреИрд╡рд┐рдХ рдЙрдкрд╛рдп рдЕрдкрдирд╛рдПрдВ</li>
    </ul>
  `
};

const uploadSection = document.getElementById('uploadSection');
const uploadedTitle = document.getElementById('uploadedTitle');
const imageContainer = document.getElementById('imageContainer');
const predictBtn = document.getElementById('predictBtn');
const resultBox = document.getElementById('resultBox');
const pageTitle = document.getElementById('pageTitle');

document.getElementById('imageInput').addEventListener('change', function () {
  const file = this.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    document.getElementById('preview').src = e.target.result;

    // Hide main title and show upload related elements
    pageTitle.style.display = 'none';
    uploadedTitle.style.display = 'block';
    imageContainer.style.display = 'flex';
    predictBtn.style.display = 'inline-block';
	document.getElementById('clearBtn').style.display = 'inline-block';

    // Keep layout centered before prediction
    document.querySelector('.content-wrapper').classList.remove('expanded');

    // Hide result box until predict clicked
    resultBox.style.display = 'none';
  };
  reader.readAsDataURL(file);
});

function predict() {
  const fileInput = document.getElementById('imageInput');
  const file = fileInput.files[0];

  if (!file) {
    alert("Please upload an image first.");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  fetch("https://web-production-b5878.up.railway.app/predict", {
    method: "POST",
    body: formData
  })
  .then(res => res.json())
  .then(data => {
    const disease = data.class || data.prediction || "Unknown";
    const confidence = parseFloat(data.confidence || 0);

    let key = disease;
    if (disease.toLowerCase() === "healthy") key = "Potato___healthy";
    if (disease.toLowerCase().includes("early")) key = "Potato___Early_blight";
    if (disease.toLowerCase().includes("late")) key = "Potato___Late_blight";

    const desc = descriptions[key] || "No description available.";

    const readableName = disease.replace(/_/g, ' ');
    const lowerName = readableName.toLowerCase();

    // Update UI
    document.getElementById("diseaseName").textContent = readableName;
    document.getElementById("confidence").textContent = confidence.toFixed(2) + "%";
    document.getElementById("description").innerHTML = desc;
    document.getElementById("aboutLabel").textContent = readableName;

    // Color coding
    const nameSpan = document.getElementById("diseaseName");
    ["result-green", "result-red", "result-orange"].forEach(cls => {
      nameSpan.classList.remove(cls);
    });

    if (lowerName.includes("healthy")) {
      nameSpan.classList.add("result-green");
    } else if (lowerName.includes("late")) {
      nameSpan.classList.add("result-red");
    } else if (lowerName.includes("early")) {
      nameSpan.classList.add("result-orange");
    }

    // Show results
    resultBox.style.display = "block";

    // Expand layout to side by side
    document.querySelector('.content-wrapper').classList.add('expanded');
  })
  .catch(err => {
    alert("Error while predicting. Please try again.");
    console.error(err);
  });
}

function clearAll() {
  // Reset image preview
  document.getElementById("imageInput").value = "";
  document.getElementById("preview").src = "https://img.icons8.com/ios/100/image.png";

  // Hide UI parts
  document.getElementById("uploadedTitle").style.display = "none";
  document.getElementById("imageContainer").style.display = "none";
  document.getElementById("predictBtn").style.display = "none";
  document.getElementById("clearBtn").style.display = "none";
  document.getElementById("resultBox").style.display = "none";

  // Reset content
  document.getElementById("diseaseName").textContent = "";
  document.getElementById("confidence").textContent = "";
  document.getElementById("aboutLabel").textContent = "";
  document.getElementById("description").innerHTML = "-";

  // Remove color class
  const nameSpan = document.getElementById("diseaseName");
  ["result-green", "result-red", "result-orange"].forEach(cls => {
    nameSpan.classList.remove(cls);
  });

  // Reset layout
  document.getElementById("pageTitle").style.display = "block";
  document.querySelector('.content-wrapper').classList.remove("expanded");
}
